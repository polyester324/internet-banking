create table public.clients
(
    id         bigserial
        constraint clients_pk
            primary key,
    first_name varchar(26) not null
        constraint check_first_name_length
            check ((length((first_name)::text) >= 2) AND (length((first_name)::text) <= 26)),
    last_name  varchar(26) not null
        constraint check_last_name_length
            check ((length((last_name)::text) >= 2) AND (length((last_name)::text) <= 26)),
    created    timestamp   not null
);

alter table public.clients
    owner to postgres;


create table public.security
(
    id        bigserial
        constraint security_pk
            primary key,
    email     varchar                                   not null,
    password  varchar                                   not null,
    client_id bigint                                    not null
        constraint security_clients_id_fk
            references public.clients
            on update cascade on delete cascade,
    role      varchar default 'USER'::character varying not null
);

alter table public.security
    owner to postgres;

create unique index security_email_uindex
    on public.security (email);


create table public.banks
(
    id         bigserial
        constraint banks_pk
            primary key,
    bank_name  varchar   not null,
    commission numeric   not null,
    created    timestamp not null
);

alter table public.banks
    owner to postgres;


create table public.cards
(
    id             bigserial
        constraint cards_pk
            primary key,
    card_number    varchar                  not null,
    client_id      bigint                   not null
        constraint cards_clients_id_fk
            references public.clients
            on update cascade on delete cascade,
    balance        numeric(15, 2) default 0 not null,
    money_currency varchar                  not null,
    created        timestamp                not null,
    card_type      varchar
);

alter table public.cards
    owner to postgres;

create unique index cards_card_number_uindex
    on public.cards (card_number);

create trigger t_balance_check
    before insert or update
    on public.cards
    for each row
execute procedure public.check_balance();


create table public.investments
(
    id                bigserial
        constraint investments_pk
            primary key,
    investment_number varchar        not null,
    card_id           bigint         not null
        constraint investments_cards_id_fk
            references public.cards
            on update cascade on delete cascade,
    bank_id           bigint         not null
        constraint investments_banks_id_fk
            references public.banks
            on update cascade on delete cascade,
    money_currency    varchar        not null,
    created           timestamp      not null,
    expired           timestamp      not null,
    invested_amount   numeric(15, 2) not null,
    expected_amount   numeric(15, 2) not null,
    time              varchar        not null,
    client_id         bigint         not null
        constraint investments_clients_id_fk
            references public.clients
            on update cascade on delete cascade
);

alter table public.investments
    owner to postgres;

create unique index investments_investment_number_uindex
    on public.investments (investment_number);


create function public.check_balance() returns trigger
    language plpgsql
as
$$
BEGIN
    IF NEW.balance < 0 THEN
        RAISE EXCEPTION 'Insufficient funds in the account';
    END IF;
    RETURN NEW;
END;
$$;

alter function public.check_balance() owner to postgres;


create trigger t_balance_check
    before insert or update
    on public.cards
    for each row
execute procedure public.check_balance();


